@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: @BoardBackgroundColor; /* the board color */
            --player1: @Player1Color; /*Player 1's color */
            --player2: @Player2Color; /*Player 2's color */
        }
    </style>
</HeadContent>

<nav>
    @for (byte currentIndex = 0; currentIndex < 7; currentIndex++) { <!--Loop through to create all piece spans-->
        var col = currentIndex;
        <span title="Click me to play a piece" @onclick="() => PlayPiece(col)">🔽</span>
    } 
</nav>

<article> <!--All messages for the game, error and current turn messages including a reset button-->
    @winnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@CurrentTurn</span>
</article>

<div>
    <div class="board">
        @for (var currentIndex = 0; currentIndex < 42; currentIndex++) { <!--Loop through to create the containers for all pieces-->
            <span class="container"><span></span></span> 
        }
    </div>

    @for (var currentIndex = 0; currentIndex < 42; currentIndex++) { <!--Loop through to create all individual pieces-->
        <span class="@pieces[currentIndex]"></span>
    } 
</div>

@code {
    [Parameter] // Parameters for the game colors
    public string BoardBackgroundColor { get; set; } = "black";
    [Parameter]
    public string Player1Color { get; set; } = "green";
    [Parameter]
    public string Player2Color { get; set; } = "purple";

    // Variables for the game
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";
    private string CurrentTurn => (winnerMessage == string.Empty)
    ? $"Player {State.PlayerTurn}'s Turn" : "";

    protected override void OnInitialized() // Reset game on initialazation
    {
        State.ResetBoard();
    }

    private void PlayPiece(byte col) // Function for game mechanic and state when playing the game
    {
        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }

        winnerMessage = State.CheckForWin() switch
        {
            GameState.WinState.Player1_Wins => "Player 1 Wins!",
            GameState.WinState.Player2_Wins => "Player 2 Wins!",
            GameState.WinState.Tie => "It's a tie!",
            _ => ""
        };
    }

    void ResetGame() // Function to reset game state
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }
}